{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/edwin/Desktop/React/challenges/employees/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { gql } from '@apollo/client';\nimport AWSAppSyncClient from \"aws-appsync\";\nimport { Rehydrated } from 'aws-appsync-react';\nimport { ApolloProvider } from 'react-apollo';\nimport appSyncConfig from './appsync'; // A\n\nconst client = new AWSAppSyncClient({\n  url: appSyncConfig.AppSync.Default.ApiUrl,\n  region: appSyncConfig.AppSync.Default.Region,\n  auth: {\n    type: appSyncConfig.AppSync.Default.AuthMode,\n    apiKey: appSyncConfig.AppSync.Default.ApiKey\n  }\n}); // B\n\nconst WithProvider = () => {\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(Rehydrated, {\n      render: ({\n        rehydrated\n      }) => rehydrated ? /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 30\n      }, this) : /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Your custom UI componen here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 40\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}; // Test query \n\n\n_c = WithProvider;\nclient.query({\n  mutation: gql`\n        mutation createEmployee {\n            createEmployee(input: {\n                firstname: \"Kobe\"\n                lastname: \"Bryant\"\n        }) {\n            id\n        }\n    }\n  `\n}) //     gql`\n//       query listEmployees {\n//         listEmployees {\n//             items {\n//                 id\n//                 firstname\n//                 lastname\n//             }\n//         }\n//     }\n//     `\n//   })\n.then(result => console.log(result));\nReactDOM.render( /*#__PURE__*/_jsxDEV(WithProvider, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 68,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"WithProvider\");","map":{"version":3,"sources":["/Users/edwin/Desktop/React/challenges/employees/src/index.js"],"names":["React","ReactDOM","App","gql","AWSAppSyncClient","Rehydrated","ApolloProvider","appSyncConfig","client","url","AppSync","Default","ApiUrl","region","Region","auth","type","AuthMode","apiKey","ApiKey","WithProvider","rehydrated","query","mutation","then","result","console","log","render","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,GAAT,QAAoB,gBAApB;AAEA,OAAOC,gBAAP,MAA6B,aAA7B;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,OAAOC,aAAP,MAA0B,WAA1B,C,CAEA;;AACA,MAAMC,MAAM,GAAG,IAAIJ,gBAAJ,CAAqB;AAClCK,EAAAA,GAAG,EAAEF,aAAa,CAACG,OAAd,CAAsBC,OAAtB,CAA8BC,MADD;AAElCC,EAAAA,MAAM,EAAEN,aAAa,CAACG,OAAd,CAAsBC,OAAtB,CAA8BG,MAFJ;AAGlCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAET,aAAa,CAACG,OAAd,CAAsBC,OAAtB,CAA8BM,QADhC;AAEJC,IAAAA,MAAM,EAAEX,aAAa,CAACG,OAAd,CAAsBC,OAAtB,CAA8BQ;AAFlC;AAH4B,CAArB,CAAf,C,CASA;;AACA,MAAMC,YAAY,GAAG,MAAM;AAEvB,sBACI,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEZ,MAAxB;AAAA,2BACA,QAAC,UAAD;AACI,MAAA,MAAM,EAAE,CAAC;AAAEa,QAAAA;AAAF,OAAD,KACJA,UAAU,gBAAG,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,cAAH,gBAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAF/B;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAXD,C,CAaA;;;KAbMD,Y;AAeNZ,MAAM,CACHc,KADH,CACS;AACLC,EAAAA,QAAQ,EAAEpB,GAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVS,CADT,EAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA,CA0BGqB,IA1BH,CA0BQC,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CA1BlB;AA6BAxB,QAAQ,CAAC2B,MAAT,eAAgB,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAkCC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAlC","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { gql } from '@apollo/client';\n\nimport AWSAppSyncClient from \"aws-appsync\";\nimport { Rehydrated } from 'aws-appsync-react';\nimport { ApolloProvider } from 'react-apollo';\n\nimport appSyncConfig from './appsync';\n\n// A\nconst client = new AWSAppSyncClient({\n  url: appSyncConfig.AppSync.Default.ApiUrl,\n  region: appSyncConfig.AppSync.Default.Region,\n  auth: {\n    type: appSyncConfig.AppSync.Default.AuthMode,\n    apiKey: appSyncConfig.AppSync.Default.ApiKey,\n  }\n});\n\n// B\nconst WithProvider = () => {\n        \n    return (\n        <ApolloProvider client={client}>\n        <Rehydrated \n            render={({ rehydrated }) => (\n                rehydrated ? <App /> : <strong>Your custom UI componen here...</strong>\n            )}\n        />\n        </ApolloProvider>\n    )\n}\n\n// Test query \n\nclient\n  .query({\n    mutation: gql `\n        mutation createEmployee {\n            createEmployee(input: {\n                firstname: \"Kobe\"\n                lastname: \"Bryant\"\n        }) {\n            id\n        }\n    }\n  `\n  })\n    \n//     gql`\n//       query listEmployees {\n//         listEmployees {\n//             items {\n//                 id\n//                 firstname\n//                 lastname\n//             }\n//         }\n//     }\n//     `\n//   })\n  .then(result => console.log(result));\n\n\nReactDOM.render(<WithProvider />, document.getElementById('root'));"]},"metadata":{},"sourceType":"module"}