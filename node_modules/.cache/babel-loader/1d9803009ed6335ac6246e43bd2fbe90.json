{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/edwin/Desktop/React/challenges/employees/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import{jsx as _jsx}from\"react/jsx-runtime\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n      query listEmployees {\\n        listEmployees {\\n            items {\\n                id\\n                firstname\\n                lastname\\n                skills\\n            }\\n        }\\n    }\\n    \"]);_templateObject=function _templateObject(){return data;};return data;}import React from'react';import ReactDOM from'react-dom';import'./index.css';import App from'./App';import{gql}from'@apollo/client';import AWSAppSyncClient from\"aws-appsync\";import{Rehydrated}from'aws-appsync-react';import{ApolloProvider}from'react-apollo';import appSyncConfig from'./appsync';// A\nvar client=new AWSAppSyncClient({url:appSyncConfig.AppSync.Default.ApiUrl,region:appSyncConfig.AppSync.Default.Region,auth:{type:appSyncConfig.AppSync.Default.AuthMode,apiKey:appSyncConfig.AppSync.Default.ApiKey}});// B\nvar WithProvider=function WithProvider(){return/*#__PURE__*/_jsx(ApolloProvider,{client:client,children:/*#__PURE__*/_jsx(Rehydrated,{render:function render(_ref){var rehydrated=_ref.rehydrated;return rehydrated?/*#__PURE__*/_jsx(App,{}):/*#__PURE__*/_jsx(\"strong\",{children:\"Your custom UI componen here...\"});}})});};// Test query \n//client.mutate({\n//   variables: { firstname: \"Edwin\", lastname: \"Sam\" },\n//   mutation: gql`\n//     mutation createEmployee($firstname: String!, $lastname: String!){\n//       createEmployee( input: {firstname: $firstname, lastname: $lastname} ) {\n//         id\n//         firstname\n//         lastname\n//       }\n//     }\n//   `\nclient.query({query:gql(_templateObject())}).then(function(result){return console.log(result);}).catch(function(error){return console.log(error);});ReactDOM.render(/*#__PURE__*/_jsx(WithProvider,{}),document.getElementById('root'));","map":{"version":3,"sources":["/Users/edwin/Desktop/React/challenges/employees/src/index.js"],"names":["React","ReactDOM","App","gql","AWSAppSyncClient","Rehydrated","ApolloProvider","appSyncConfig","client","url","AppSync","Default","ApiUrl","region","Region","auth","type","AuthMode","apiKey","ApiKey","WithProvider","rehydrated","query","then","result","console","log","catch","error","render","document","getElementById"],"mappings":"2jBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA,MAAO,aAAP,CACA,MAAOC,CAAAA,GAAP,KAAgB,OAAhB,CACA,OAASC,GAAT,KAAoB,gBAApB,CAEA,MAAOC,CAAAA,gBAAP,KAA6B,aAA7B,CACA,OAASC,UAAT,KAA2B,mBAA3B,CACA,OAASC,cAAT,KAA+B,cAA/B,CAEA,MAAOC,CAAAA,aAAP,KAA0B,WAA1B,CAEA;AACA,GAAMC,CAAAA,MAAM,CAAG,GAAIJ,CAAAA,gBAAJ,CAAqB,CAClCK,GAAG,CAAEF,aAAa,CAACG,OAAd,CAAsBC,OAAtB,CAA8BC,MADD,CAElCC,MAAM,CAAEN,aAAa,CAACG,OAAd,CAAsBC,OAAtB,CAA8BG,MAFJ,CAGlCC,IAAI,CAAE,CACJC,IAAI,CAAET,aAAa,CAACG,OAAd,CAAsBC,OAAtB,CAA8BM,QADhC,CAEJC,MAAM,CAAEX,aAAa,CAACG,OAAd,CAAsBC,OAAtB,CAA8BQ,MAFlC,CAH4B,CAArB,CAAf,CASA;AACA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CAEvB,mBAEQ,KAAC,cAAD,EAAgB,MAAM,CAAEZ,MAAxB,uBACI,KAAC,UAAD,EACI,MAAM,CAAE,yBAAGa,CAAAA,UAAH,MAAGA,UAAH,OACJA,CAAAA,UAAU,cAAG,KAAC,GAAD,IAAH,cAAa,2DADnB,EADZ,EADJ,EAFR,CAYH,CAdD,CAgBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAb,MAAM,CAACc,KAAP,CAAa,CACTA,KAAK,CAAEnB,GAAF,mBADI,CAAb,EAeGoB,IAfH,CAeQ,SAAAC,MAAM,QAAIC,CAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAAJ,EAfd,EAgBGG,KAhBH,CAgBS,SAAAC,KAAK,QAAIH,CAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ,CAAJ,EAhBd,EAmBA3B,QAAQ,CAAC4B,MAAT,cAAgB,KAAC,YAAD,IAAhB,CAAkCC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAlC","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { gql } from '@apollo/client';\n\nimport AWSAppSyncClient from \"aws-appsync\";\nimport { Rehydrated } from 'aws-appsync-react';\nimport { ApolloProvider } from 'react-apollo';\n\nimport appSyncConfig from './appsync';\n\n// A\nconst client = new AWSAppSyncClient({\n  url: appSyncConfig.AppSync.Default.ApiUrl,\n  region: appSyncConfig.AppSync.Default.Region,\n  auth: {\n    type: appSyncConfig.AppSync.Default.AuthMode,\n    apiKey: appSyncConfig.AppSync.Default.ApiKey,\n  }\n});\n\n// B\nconst WithProvider = () => {\n        \n    return (\n        \n            <ApolloProvider client={client}>\n                <Rehydrated \n                    render={({ rehydrated }) => (\n                        rehydrated ? <App /> : <strong>Your custom UI componen here...</strong>\n                    )}\n                />\n            </ApolloProvider>\n        \n        \n    )\n}\n\n// Test query \n\n//client.mutate({\n//   variables: { firstname: \"Edwin\", lastname: \"Sam\" },\n//   mutation: gql`\n//     mutation createEmployee($firstname: String!, $lastname: String!){\n//       createEmployee( input: {firstname: $firstname, lastname: $lastname} ) {\n//         id\n//         firstname\n//         lastname\n//       }\n//     }\n//   `\n\nclient.query({\n    query: gql`\n      query listEmployees {\n        listEmployees {\n            items {\n                id\n                firstname\n                lastname\n                skills\n            }\n        }\n    }\n    `\n    \n})  \n  .then(result => console.log(result))\n  .catch(error => console.log(error));\n\n\nReactDOM.render(<WithProvider />, document.getElementById('root'));"]},"metadata":{},"sourceType":"module"}