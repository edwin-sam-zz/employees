{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/edwin/Desktop/React/challenges/employees/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { gql } from '@apollo/client';\nimport AWSAppSyncClient from \"aws-appsync\";\nimport { Rehydrated } from 'aws-appsync-react';\nimport { ApolloProvider } from 'react-apollo';\nimport appSyncConfig from './appsync'; // A\n\nconst client = new AWSAppSyncClient({\n  url: appSyncConfig.AppSync.Default.ApiUrl,\n  region: appSyncConfig.AppSync.Default.Region,\n  auth: {\n    type: appSyncConfig.AppSync.Default.AuthMode,\n    apiKey: appSyncConfig.AppSync.Default.ApiKey\n  }\n}); // B\n\nconst WithProvider = () => {\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(Rehydrated, {\n      render: ({\n        rehydrated\n      }) => rehydrated ? /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 38\n      }, this) : /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Your custom UI componen here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 48\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 13\n  }, this);\n}; // Test query \n//client.mutate({\n//   variables: { firstname: \"Edwin\", lastname: \"Sam\" },\n//   mutation: gql`\n//     mutation createEmployee($firstname: String!, $lastname: String!){\n//       createEmployee( input: {firstname: $firstname, lastname: $lastname} ) {\n//         id\n//         firstname\n//         lastname\n//       }\n//     }\n//   `\n\n\n_c = WithProvider;\nclient.query({\n  query: gql`\n      query listEmployees {\n        listEmployees {\n            items {\n                id\n                firstname\n                lastname\n                skills\n            }\n        }\n    }\n    `\n}).then(result => console.log(result)).catch(error => console.log(error));\nReactDOM.render( /*#__PURE__*/_jsxDEV(WithProvider, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 73,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"WithProvider\");","map":{"version":3,"sources":["/Users/edwin/Desktop/React/challenges/employees/src/index.js"],"names":["React","ReactDOM","App","gql","AWSAppSyncClient","Rehydrated","ApolloProvider","appSyncConfig","client","url","AppSync","Default","ApiUrl","region","Region","auth","type","AuthMode","apiKey","ApiKey","WithProvider","rehydrated","query","then","result","console","log","catch","error","render","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,GAAT,QAAoB,gBAApB;AAEA,OAAOC,gBAAP,MAA6B,aAA7B;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,OAAOC,aAAP,MAA0B,WAA1B,C,CAEA;;AACA,MAAMC,MAAM,GAAG,IAAIJ,gBAAJ,CAAqB;AAClCK,EAAAA,GAAG,EAAEF,aAAa,CAACG,OAAd,CAAsBC,OAAtB,CAA8BC,MADD;AAElCC,EAAAA,MAAM,EAAEN,aAAa,CAACG,OAAd,CAAsBC,OAAtB,CAA8BG,MAFJ;AAGlCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAET,aAAa,CAACG,OAAd,CAAsBC,OAAtB,CAA8BM,QADhC;AAEJC,IAAAA,MAAM,EAAEX,aAAa,CAACG,OAAd,CAAsBC,OAAtB,CAA8BQ;AAFlC;AAH4B,CAArB,CAAf,C,CASA;;AACA,MAAMC,YAAY,GAAG,MAAM;AAEvB,sBAEQ,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEZ,MAAxB;AAAA,2BACI,QAAC,UAAD;AACI,MAAA,MAAM,EAAE,CAAC;AAAEa,QAAAA;AAAF,OAAD,KACJA,UAAU,gBAAG,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,cAAH,gBAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAF/B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UAFR;AAYH,CAdD,C,CAgBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KA5BMD,Y;AA8BNZ,MAAM,CAACc,KAAP,CAAa;AACTA,EAAAA,KAAK,EAAEnB,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZa,CAAb,EAeGoB,IAfH,CAeQC,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAflB,EAgBGG,KAhBH,CAgBSC,KAAK,IAAIH,OAAO,CAACC,GAAR,CAAYE,KAAZ,CAhBlB;AAmBA3B,QAAQ,CAAC4B,MAAT,eAAgB,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAkCC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAlC","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { gql } from '@apollo/client';\n\nimport AWSAppSyncClient from \"aws-appsync\";\nimport { Rehydrated } from 'aws-appsync-react';\nimport { ApolloProvider } from 'react-apollo';\n\nimport appSyncConfig from './appsync';\n\n// A\nconst client = new AWSAppSyncClient({\n  url: appSyncConfig.AppSync.Default.ApiUrl,\n  region: appSyncConfig.AppSync.Default.Region,\n  auth: {\n    type: appSyncConfig.AppSync.Default.AuthMode,\n    apiKey: appSyncConfig.AppSync.Default.ApiKey,\n  }\n});\n\n// B\nconst WithProvider = () => {\n        \n    return (\n        \n            <ApolloProvider client={client}>\n                <Rehydrated \n                    render={({ rehydrated }) => (\n                        rehydrated ? <App /> : <strong>Your custom UI componen here...</strong>\n                    )}\n                />\n            </ApolloProvider>\n        \n        \n    )\n}\n\n// Test query \n\n//client.mutate({\n//   variables: { firstname: \"Edwin\", lastname: \"Sam\" },\n//   mutation: gql`\n//     mutation createEmployee($firstname: String!, $lastname: String!){\n//       createEmployee( input: {firstname: $firstname, lastname: $lastname} ) {\n//         id\n//         firstname\n//         lastname\n//       }\n//     }\n//   `\n\nclient.query({\n    query: gql`\n      query listEmployees {\n        listEmployees {\n            items {\n                id\n                firstname\n                lastname\n                skills\n            }\n        }\n    }\n    `\n    \n})  \n  .then(result => console.log(result))\n  .catch(error => console.log(error));\n\n\nReactDOM.render(<WithProvider />, document.getElementById('root'));"]},"metadata":{},"sourceType":"module"}