{"version":3,"sources":["logo.png","Components/header.js","mutations/createEmployee.js","queries/ListEmployees.js","mutations/removeEmployee.js","Components/ListOfEmployees.js","AddEmployee.js","App.js","appsync.js","index.js"],"names":["Header","AppBar","position","Toolbar","IconButton","edge","color","aria-label","src","logo","className","Typography","variant","CREATE_EMPLOYEE","gql","LIST_EMPLOYEE","REMOVE_EMPLOYEE","ListOfEmployees","query","loading","error","data","console","log","TableBody","listEmployees","items","map","row","TableRow","TableCell","component","scope","id","substring","align","firstname","lastname","skills","mutation","refetchQueries","Button","onClick","variables","EmployeeForm","useState","firstName","setFirstName","lastName","setLastName","setSkills","FormControl","TextField","label","value","onChange","evt","target","postMutation","AddEmployee","visible","setVisible","title","setTitle","renderForm","buttonText","Table","TableHead","App","appSyncConfig","UserAgent","Version","IdentityManager","Default","AppSync","ApiUrl","Region","AuthMode","ApiKey","ClientDatabasePrefix","client","AWSAppSyncClient","url","region","auth","type","apiKey","WithProvider","render","rehydrated","then","result","catch","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e1f79b5b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.0b53da86.png\";","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport logo from '../logo.png'\nimport '../index.css'\n\nconst style = {\n    flexGrow: 1\n}\nconst Header = () => {\n    return (\n        <div>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"Menu\">\n                        Menu\n                    </IconButton>\n                    <img src={logo} className=\"header-img\" />\n                    <Typography variant=\"h6\">\n                        Employee Application\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\n\nexport default Header;","import gql from 'graphql-tag'\n\n\n\nconst CREATE_EMPLOYEE = gql` \n  mutation createEmployee ($firstname: String!, $lastname: String! $skills: String!)\n   {\n    createEmployee(input: {firstname: $firstname, lastname: $lastname, skills: $skills}) {\n        id\n      firstname\n      lastname\n      skills\n    }\n}\n`;\nexport default CREATE_EMPLOYEE;","import gql from 'graphql-tag'\n\nconst LIST_EMPLOYEE = gql`\n    query listEmployees {\n        listEmployees {\n            items {\n                id\n                firstname\n                lastname\n                skills\n            }\n        }\n    }\n`\n\nexport default LIST_EMPLOYEE;","import gql from 'graphql-tag';\n\nconst REMOVE_EMPLOYEE = gql `\n    mutation deleteEmployee ($id: String!) {\n        deleteEmployee(input: {id: $id}) {\n            id\n        }\n    }\n`\nexport default REMOVE_EMPLOYEE;","\nimport LIST_EMPLOYEE from '../queries/ListEmployees';\nimport REMOVE_EMPLOYEE  from '../mutations/removeEmployee';\nimport { useQuery } from '@apollo/client';\nimport { Query } from \"react-apollo\";\nimport { ApolloProvider } from 'react-apollo';\nimport Loading from 'react-loading';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Table from '@material-ui/core/Table';\nimport Button from '@material-ui/core/Button';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag'\n\nconst ListOfEmployees = () => {\n\n    const shortID = (id) => {\n        var sID = id.substring(0, 7);\n        return sID;\n    }\n\n    return (\n        <Query query={LIST_EMPLOYEE}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading loading={loading} />;\n          if (error) console.log(error);\n          return (\n            // <p>\n            //     {console.log(data.listEmployees.items)}\n            // </p>\n\n                <TableBody>\n                    {data.listEmployees.items.map(row => (\n                        <TableRow key={row.id}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {shortID(row.id)}\n                            </TableCell>\n                            <TableCell align=\"center\">{row.firstname}</TableCell>\n                            <TableCell align=\"right\">{row.lastname}</TableCell>\n                            <TableCell align=\"right\">{row.skills}</TableCell>\n                            <Mutation mutation={REMOVE_EMPLOYEE} refetchQueries={[{query: gql`query listEmployees {\n                                        listEmployees {\n                                            items {\n                                                id\n                                                firstname\n                                                lastname\n                                                skills\n                                            }\n                                        }\n                                    }\n                                    `}]}>\n                                {mutation => <Button onClick={() => \n                                    mutation({ variables: {id: row.id }})}>\n                                        Delete\n                                        </Button>}\n                            </Mutation>\n                            <Button>Edit</Button>\n                            \n                        </TableRow>\n                    ))}\n                </TableBody>\n            )}\n        }\n      </Query>\n    )\n}\n\nexport default ListOfEmployees;","import React, { useState } from 'react';\nimport { Mutation } from 'react-apollo';\nimport Table from '@material-ui/core/Table';    \nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport { FormControl } from '@material-ui/core';\nimport { TextField } from '@material-ui/core';\nimport CREATE_EMPLOYEE from './mutations/createEmployee'\nimport ListOfEmployees from './Components/ListOfEmployees';\nimport client from './index'\nimport gql from 'graphql-tag'\nimport LIST_EMPLOYEE from './Components/ListOfEmployees'\n\nimport './index.css';\n\nconst EmployeeForm = () => {\n\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [skills, setSkills] = useState([]);\n\n    const clearForm = () => {\n        setFirstName('');\n        setLastName('');\n        setSkills('');\n    }\n\n    const submitButtonClicked = () => {\n        console.log(firstName, lastName, skills);\n\n    }\n\n    return (\n        <FormControl className=\"forms\">\n            <TextField id=\"standard-basic\" label=\"First Name\" value={firstName} onChange={evt => setFirstName(evt.target.value)} />\n            <TextField id=\"standard-basic\" label=\"Last Name\" value={lastName} onChange={evt => setLastName(evt.target.value)}/>\n            <TextField id=\"standard-basic\" label=\"Skills (Seperate with Commas)\" value={skills} onChange={evt => setSkills(evt.target.value)}/>\n\n            <Mutation mutation={CREATE_EMPLOYEE} variables={{firstname: firstName, lastname: lastName, skills: skills}} refetchQueries={[{query: gql`query listEmployees {\n                    listEmployees {\n                        items {\n                            id\n                            firstname\n                            lastname\n                            skills\n                        }\n                    }\n                }\n                `}]}>\n                {postMutation => <Button variant=\"contained\" color=\"primary\" \n                    onClick={() => {\n                        postMutation();\n                        submitButtonClicked();\n                        clearForm();\n                    }}>\n                Submit\n                </Button>}\n            </Mutation>\n        </FormControl>\n    )\n}\n\nconst AddEmployee = () => { \n\n    const [visible, setVisible] = useState(false);\n    const [title, setTitle] = useState('Add Employee');\n\n    const renderForm = visible ? <EmployeeForm /> : null;\n    const buttonText = title;\n\n    const clickButton = () => {\n        setVisible(<EmployeeForm />);\n        setTitle('Back')\n    }    \n\n    return (\n        <div>\n            {renderForm}\n            <Button variant=\"contained\" color=\"primary\" className=\"addEmpButton\"\n            onClick={() => clickButton()} \n            >\n                {buttonText}\n            </Button>\n            <p>\n            </p>\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell component=\"th\" scope=\"row\">Id</TableCell>\n                        <TableCell align=\"center\">First Name</TableCell>\n                        <TableCell align=\"right\">Last Name</TableCell>\n                        <TableCell align=\"right\">Skills</TableCell>\n                    </TableRow>\n                </TableHead>\n\n                <ListOfEmployees />\n\n            </Table>\n\n        </div>\n    )\n}\n         \nexport default AddEmployee;","import React from 'react';\nimport Header from './Components/header'\nimport AddEmployee from './AddEmployee';\n\nconst App = () => {\n    return (\n        <div>\n            <Header />\n            <AddEmployee />\n        </div>\n    );\n}\n\nexport default App;","const appSyncConfig = {\n        UserAgent: \"aws-amplify-cli/0.1.0\",\n        Version: \"1.0\",\n        IdentityManager: {\n            Default: {}\n        },\n        AppSync: {\n            Default: {\n                ApiUrl: \"https://qyqajpxndzdw5nojnzorgtw6we.appsync-api.us-west-2.amazonaws.com/graphql\",\n                Region: \"us-west-2\",\n                AuthMode: \"API_KEY\",\n                ApiKey: \"da2-cxtvdwzcbfcjjlbc4usayavree\",\n                ClientDatabasePrefix: \"Employees_API_KEY\"\n            }\n        }\n}\n\nexport default appSyncConfig;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { gql } from '@apollo/client';\n\nimport AWSAppSyncClient from \"aws-appsync\";\nimport { Rehydrated } from 'aws-appsync-react';\nimport { ApolloProvider } from 'react-apollo';\n\nimport appSyncConfig from './appsync';\n\n// A\nconst client = new AWSAppSyncClient({\n  url: appSyncConfig.AppSync.Default.ApiUrl,\n  region: appSyncConfig.AppSync.Default.Region,\n  auth: {\n    type: appSyncConfig.AppSync.Default.AuthMode,\n    apiKey: appSyncConfig.AppSync.Default.ApiKey,\n  }\n});\n\n// B\nconst WithProvider = () => {  \n\n  return (\n    <ApolloProvider client={client}>\n        <Rehydrated \n            render={({ rehydrated }) => (\n                rehydrated ? <App /> : <strong>Your custom UI component here...</strong>\n            )}\n        />\n    </ApolloProvider>\n  )\n}\n\n// Test query \n\n//client.mutate({\n//   variables: { firstname: \"Edwin\", lastname: \"Sam\" },\n//   mutation: gql`\n//     mutation createEmployee($firstname: String!, $lastname: String!){\n//       createEmployee( input: {firstname: $firstname, lastname: $lastname} ) {\n//         id\n//         firstname\n//         lastname\n//       }\n//     }\n//   `\n\nclient.query({\n  query: gql`\n    query listEmployees {\n      listEmployees {\n          items {\n              id\n              firstname\n              lastname\n              skills\n          }\n      }\n  }\n  `  \n})  \n  .then(result => console.log(result))\n  .catch(error => console.log(error));\n\n\nReactDOM.render(<WithProvider />, document.getElementById('root'));"],"sourceRoot":""}